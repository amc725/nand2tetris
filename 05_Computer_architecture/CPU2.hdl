// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // 1   1   1   a   c1  c2  c3  c4  c5  c6  d1  d2  d3  j1  j2  j3
    // 15  14  13  12  11  10  9   8   7   6   5   4   3   2   1   0



    //Instruccion C y A
    And(a=instruccionC, b=true, out=instruccionC);
    Not(in=instruccionC, out=instruccionA);

    //ALU escribe en registro-A	
    And(a=instruccionC, b=instruction[5], out=ALUenA);

    //Valor a escibir en registro-A: calculo de ALU o instruccion-A
    Mux16(a=instruction, b=outALU, sel=ALUenA, out=outEntradaRegistroA);
    //Escribir en registroA???
    Or(a=ALUenA, b=instruccionA, out=outLoadRegistroA);
    ARegister(in=outEntradaRegistroA, load=outLoadRegistroA, out=outRegistroA, out[0..14]=addressM);
    //A o M en ALU????
    Mux16(a=outRegistroA, b=inM, sel=instruction[12], out=outEntradaALU2); 	

    //Escribir en registro-D????
    And(a=instruccionC, b=instruction[4], out=ALUenD);
    DRegister(in=outALU, load=ALUenD, out=outRegistroD);

    //Escribir en Memoria????
    And(a=instruccionC, b=instruction[3], out=writeM);
    


   
    //ALU 	
    ALU(x=outRegistroD, y=outEntradaALU2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=outZr, ng=outNg); 

    Not(in=outNg, out=ge); // output >= 0
    Not(in=outZr, out=nz); // output != 0
    And(a=ge, b=nz, out=pos); // output > 0
    
    And(a=instruction[0], b=pos, out=jmp0);
    And(a=instruction[1], b=outZr, out=jmp1);
    And(a=instruction[2], b=outNg, out=jmp2);
    
    Or(a=jmp0, b=jmp1, out=or12);
    Or(a=or12, b=jmp2, out=or123);
    And(a=instruccionC, b=or123, out=loadPC);
    // want to increment if we didn't have a load or a reset instruction
    Or(a=reset, b=loadPC, out=resetORload);
    Not(in=resetORload, out=incPC);
    // PC is always hooked up to A register
	//PC(reset=reset, load=loadPC, in=outEntradaRegistroA, inc=incPC, out[0..14]=pc);
    PC(reset=reset, load=loadPC, in=outRegistroA, inc=true, out[0..14]=pc);






    
}
    


       


	

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
	static Array twoToThe;

	/** Initializes the library. */
	function void init() {
		let twoToThe = Array.new(16);
		let twoToThe[0] = 1;		
		let twoToThe[1] = 2;	
		let twoToThe[2] = 4;		
		let twoToThe[3] = 8;		
		let twoToThe[4] = 16;		
		let twoToThe[5] = 32;		
		let twoToThe[6] = 64;		
		let twoToThe[7] = 128;		
		let twoToThe[8] = 256;		
		let twoToThe[9] = 512;		
		let twoToThe[10] = 1024;	
		let twoToThe[11] = 2048;	
		let twoToThe[12] = 4096;	
		let twoToThe[13] = 8192;	
		let twoToThe[14] = 16384;	
		let twoToThe[15] = 32767 + 1;	//http://nand2tetris-questions-and-answers-forum.52.s1.nabble.com/integer-value-of-1000000000000000-td4029101.html
		return;
	}

	/** Returns the absolute value of x. */
	function int abs(int x) {
		if (x < 0){
			let x = -(x);
		} 
		return x;
	}

	/** Returns the product of x and y. 
	 *  When a Jack compiler detects the multiplication operator '*' in the 
	 *  program's code, it handles it by invoking this method. In other words,
	 *  the Jack expressions x*y and multiply(x,y) return the same value.
	 */

	function int multiply(int x, int y) {
		var int sum, shiftedX, j;
		
		let sum = 0 ;
		let j = 0 ;
		let shiftedX = x ;
		
		while(j < 16){
			if (Math.bit(y, j) = true){
				let sum = sum + shiftedX ;
			}
			let shiftedX = shiftedX + shiftedX ;
			let j = j + 1;
		}
		return sum;
	}

	function boolean bit(int x, int i){
		var boolean result; 
		if ((x & twoToThe[i]) = 0){
			let result = false ;
		}
		else{
			let result = true ;
		}
		return result;
	}
	

	/** Returns the integer part of x/y.
	 *  When a Jack compiler detects the multiplication operator '/' in the 
	 *  program's code, it handles it by invoking this method. In other words,
	 *  the Jack expressions x/y and divide(x,y) return the same value.
	 */

	 
	function int divide(int x, int y) {
		var int result, q;
		var boolean positive;

		if( (x<0) = (y<0) ){
			let positive = true;
		}
		else{
			let positive = false;
		}
		
		let x = Math.abs(x);
		let y = Math.abs(y);

		if (y > x) {
			return 0;
		}
		else{
			let q = Math.divide(x, y+y);
			if(x - (Math.multiply(q+q, y)) < y){
				let result = q + q;
			}
			else{
				let result = q + q + 1;
			}
		}
		
		if (positive){
			return result;
		}
		else{
			return -result;
		}
	}

	/** Returns the integer part of the square root of x. */
   function int sqrt(int x) {
        var int result, test, test2, j;
        
        let result = 0;
        let j = 7;
        while((j > 0) | (j = 0)) {		
            let test = result + twoToThe[j];
            let test2 = Math.multiply(test, test);
            if((test2 < x) | (test2 = x)) {
				if(test2 > 0){
                	let result = test;
				}
            }
            let j = j - 1;
        }
        return result;
    }

	/** Returns the greater number. */
	function int max(int a, int b) {
		if (a > b){
			return a;
		}
		else{
			return b;
		}
	}

	/** Returns the smaller number. */
	function int min(int a, int b) {
		if (a < b){
			return a;
		}
		else{
			return b;
		}
	}
	
	/** Returns twoToThe */
	function int twoToThe(int a) {
		return twoToThe[a];
	}
	
}



